type: edu
files:
- name: src/machine/Main.kt
  visible: true
  text: "package machine\n\nfun main() {\n    coffeeMachine = CoffeeMachine()\n  \
    \  coffeeMachine.makeCofee()\n}\n\nclass CoffeeMachine {\n    val startingText\
    \ = \"Starting to make a coffee\"\n    val grindingText = \"Grinding coffee beans\"\
    \n    val boilingText = \"Boiling water\"\n    val mixingWaterText = \"Mixing\
    \ boiled water with crushed coffee beans\"\n    val pouringSomethingText = \"\
    Pouring <something> into the cup\"\n    val readyText = \"Coffee is ready!\"\n\
    \    val coffeeText = \"coffee\"\n    val milkText = \"some milk\"\n    \n   \
    \ CoffeeMachine() {\n        // nothing just now\n    }\n\n    fun makeCoffee()\
    \ {\n        start()\n        grinding()\n        boiling()\n        mixing()\n\
    \        pouringSomething(coffeeText)\n        pouringSomething(milkText)\n  \
    \      end()\n    }\n\n    private fun start() {\n        println(startingText)\n\
    \    }\n    \n    private fun grinding() {\n        println(grindingText)\n  \
    \  }\n    \n    private fun boiling() {\n        println(boilingText)\n    }\n\
    \    \n    private fun mixing() {\n        println(mixingWaterText)\n    }\n \
    \   \n    private fun pouringSomething(whatToPouring: String) {\n        println(pouringSomethingText.replace(\"\
    <something>\", whatToPouring))\n    }\n    \n    private fun end() {\n       \
    \ println(readyText)\n    }\n}\n"
  learner_created: false
- name: test/CoffeeMachineTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.Arrays;
    import java.util.List;


    public class CoffeeMachineTest extends StageTest<String> {

        @Override
        public List<TestCase<String>> generate() {
            return Arrays.asList(
                new TestCase<String>()
                    .setInput("25")
                    .setAttach("25"),

                new TestCase<String>()
                    .setInput("125")
                    .setAttach("125"),

                new TestCase<String>()
                    .setInput("1")
                    .setAttach("1"),

                new TestCase<String>()
                    .setInput("123")
                    .setAttach("123")
            );
        }

        @Override
        public CheckResult check(String reply, String clue) {
            String[] lines = reply.split("\\n");
            if (lines.length < 3) {
                return new CheckResult(false,
                    "Output contains less than 3 lines, but should output at least 3 lines");
            }
            String[] last3Lines = {
                lines[lines.length - 3],
                lines[lines.length - 2],
                lines[lines.length - 1]
            };

            int cups = Integer.parseInt(clue);
            boolean water = false, milk = false, beans = false;

            for(String line : last3Lines) {
                line = line.toLowerCase();

                if(line.contains("milk")) {
                    milk = line.contains(Integer.toString(cups * 50));
                    if (!milk) {
                        return new CheckResult(false,
                            "For the input " + clue + " your program output:\n\"" +
                                line + "\"\nbut the amount of milk should be " + (cups * 50));
                    }

                } else if(line.contains("water")) {
                    water = line.contains(Integer.toString(cups * 200));
                    if (!water) {
                        return new CheckResult(false,
                            "For the input " + clue + " your program output:\n" +
                                line + "\nbut the amount of water should be " + (cups * 200));
                    }

                } else if(line.contains("beans")) {
                    beans = line.contains(Integer.toString(cups * 15));
                    if (!beans) {
                        return new CheckResult(false,
                            "For the input " + clue + " your program output:\n" +
                                line + "\nbut the amount of beans should be " + (cups * 15));
                    }


                } else {
                    return new CheckResult(false,
                        "One of the last 3 lines " +
                            "doesn't contain \"milk\", \"water\" or \"beans\"");
                }
            }

            if (!water) {
                return new CheckResult(false,
                    "There is no line with amount of water");
            }

            if (!milk) {
                return new CheckResult(false,
                    "There is no line with amount of milk");
            }

            if (!beans) {
                return new CheckResult(false,
                    "There is no line with amount of coffee beans");
            }

            return CheckResult.correct();
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/learn/step/5660#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Wed, 16 Nov 2022 21:11:39 UTC"
record: 2
